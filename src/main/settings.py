"""
Django settings for verkeersvergunningen project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys
from pathlib import Path

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]
DEBUG = os.getenv("DEBUG", "false").lower() == "true"

DECOS_BASE_URL = os.getenv(
    "DECOS_BASE_URL", "https://decosdvl.acc.amsterdam.nl/decosweb/aspx/api/v1/items/"
)
ZWAAR_VERKEER_ZAAKNUMMER = os.getenv(
    "ZWAAR_VERKEER_ZAAKNUMMER", "8A02814D73B3421B9C65262A45A43BD8"
)
TAXI_BSN_ZAAKNUMMER = os.getenv(
    "TAXI_BSN_ZAAKNUMMER", "1829F53FD9754B91ADC0B7D16E1519AD"
)
TAXI_ZONE_ONTHEFFING_ZAAKNUMMER = os.getenv(
    "TAXI_ZONE_ONTHEFFING_ZAAKNUMMER", "D379EC92DE114A8E92A22FD0E7EFB4E6"
)
TAXI_HANDHAVINGSZAKEN_ZAAKNUMMER = os.getenv(
    "TAXI_HANDHAVINGSZAKEN_ZAAKNUMMER", "496E3E505C4045BAB5286B56CF2FC89E"
)
DECOS_BASIC_AUTH_USER = os.getenv("DECOS_BASIC_AUTH_USER")
DECOS_BASIC_AUTH_PASS = os.getenv("DECOS_BASIC_AUTH_PASS")
DECOS_TAXI_AUTH_USER = os.getenv("DECOS_TAXI_AUTH_USER")
DECOS_TAXI_AUTH_PASS = os.getenv("DECOS_TAXI_AUTH_PASS")
CLEOPATRA_BASIC_AUTH_USER = os.environ["CLEOPATRA_BASIC_AUTH_USER"]
CLEOPATRA_BASIC_AUTH_PASS = os.environ["CLEOPATRA_BASIC_AUTH_PASS"]

BASICAUTH_USERS = {CLEOPATRA_BASIC_AUTH_USER: CLEOPATRA_BASIC_AUTH_PASS}

ALLOWED_HOSTS = ["*"]
INTERNAL_IPS = ("127.0.0.1", "0.0.0.0")


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "drf_yasg",
    "taxi",
    "zwaarverkeer",
    "health",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_http_exceptions.middleware.ExceptionHandlerMiddleware",
    "django_http_exceptions.middleware.ThreadLocalRequestMiddleware",
]


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ROOT_URLCONF = "main.urls"
BASE_URL = os.getenv("BASE_URL", "")
FORCE_SCRIPT_NAME = BASE_URL

WSGI_APPLICATION = "main.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/Amsterdam"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = BASE_URL + "/static/"
STATIC_ROOT = "/static/"

SENTRY_DSN = os.getenv("SENTRY_DSN")
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        ignore_errors=["ExpiredSignatureError"],
    )

# Django Logging settings
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": "INFO",
        "handlers": ["console", "sentry"],
    },
    "formatters": {
        "console": {"format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"},
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
        "sentry": {
            "level": "WARNING",
            "class": "raven.contrib.django.raven_compat.handlers.SentryHandler",
        },
    },
    "loggers": {
        "taxi": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "zwaarverkeer": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "health": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": os.getenv(
                "DJANGO_LOG_LEVEL", "ERROR" if "pytest" in sys.argv[0] else "INFO"
            ).upper(),
            "propagate": False,
        },
        "raven": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": False,
        },
        "sentry.errors": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": False,
        },
        # Debug all batch jobs
        "doc": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "index": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "search": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        "elasticsearch": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        "urllib3": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        "factory.containers": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "factory.generate": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "requests.packages.urllib3.connectionpool": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        # Log all unhandled exceptions
        "django.request": {
            "level": "DEBUG" if DEBUG else "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

APPLICATIONINSIGHTS_CONNECTION_STRING = os.getenv(
    "APPLICATIONINSIGHTS_CONNECTION_STRING"
)

if APPLICATIONINSIGHTS_CONNECTION_STRING:
    OPENCENSUS = {
        "TRACE": {
            "SAMPLER": "opencensus.trace.samplers.ProbabilitySampler(rate=1)",
            "EXPORTER": f"opencensus.ext.azure.trace_exporter.AzureExporter(connection_string='{APPLICATIONINSIGHTS_CONNECTION_STRING}')",
        }
    }
    LOGGING["handlers"]["azure"] = {
        "level": "DEBUG",
        "class": "opencensus.ext.azure.log_exporter.AzureLogHandler",
        "connection_string": APPLICATIONINSIGHTS_CONNECTION_STRING,
    }
    LOGGING["loggers"]["django"]["handlers"] = ["azure", "console"]
    LOGGING["loggers"]["taxi"]["handlers"] = ["azure", "console"]
    LOGGING["loggers"]["zwaarverkeer"]["handlers"] = ["azure", "console"]
    LOGGING["loggers"]["health"]["handlers"] = ["azure", "console"]
